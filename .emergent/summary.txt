<analysis>
The previous AI engineer successfully transitioned the application from a React Native mobile-first approach to a React web application, focusing on administrative and POS functionalities. The trajectory details a series of critical bug fixes and feature enhancements. Initial efforts addressed a persistent tax rate deactivation bug stemming from ID format mismatches (numeric vs. UUID) and scope issues in frontend state management for dynamic tax display. Subsequently, the engineer fixed issues with taxes not being applied to orders when sent to the kitchen by correcting backend hardcoded tax logic. Extensive work was done to ensure accurate display of tax and charge breakdowns in both active and edit order windows. Major feature additions include granular control over tax and service charge application based on order types and order total costs, and the full implementation of gratuity rules with various conditions. Data integrity issues, specifically orphaned table references, were also comprehensively resolved through backend cleanup. The work culminates with the implementation of service charge conditions based on order cost, which is currently being demonstrated.
</analysis>

<product_requirements>
The goal is to build a comprehensive restaurant Point of Sale (POS) system for web and mobile platforms. Key features include full CRUD for Menu Management (items, categories, modifiers), robust Order Processing (dine-in, takeout, delivery, customer data, notes, flexible checkout), Employee Management (PIN login, roles, schedules), and advanced Table Management (status, capacity, custom naming, order moving/merging). A significant architectural decision was to pivot from mobile-first to a web-focused Settings section for detailed administrative features. Recent work concentrated on refining financial functionalities, specifically the dynamic application of Tax Rates, Service Charges, Gratuity Rules, and Discount Policies, ensuring they are correctly calculated, displayed, and saved across the application. This includes recent enhancements to apply these charges based on order types and total cost, alongside critical bug fixes for data synchronization and display accuracy.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Architecture**: React (web), React Native (mobile), FastAPI (Python backend), MongoDB (database).
-   **Data Handling**: UUIDs for IDs, Axios for API calls, Pydantic for data validation, environment variables for URLs.
-   **State Management**: React  and  for managing component state and side effects.
-   **UI/UX Patterns**: Modals, tabbed navigation, dynamic form inputs.
-   **Core Logic**: Dynamic calculation functions for taxes, charges, and totals.
</key_technical_concepts>

<code_architecture>


-   **/app/backend/server.py**:
    -   **Importance**: Centralizes all backend API logic, database interactions, and business rules for the POS system.
    -   **Changes**:
        -   **Tax & Charge Calculation**: Updated  to dynamically fetch and apply active taxes, service charges, and gratuity rules based on order type, party size, and order amount, replacing hardcoded tax.
        -   **Order Model Enhancement**: Added  and  fields to the  model to store these details persistently.
        -   **Model Consistency**: Ensured , , , and  fields are consistent across , , and  models.
        -   **Order CRUD**: Modified order creation and update endpoints () to use the dynamic calculation, save the calculated , , and  amounts, and include .
        -   **Table Management**: Implemented logic to resolve data synchronization issues where tables were incorrectly marked occupied or orders were assigned to non-existent tables, restoring consistency between tables and orders.

-   **/app/frontend/src/App.js**:
    -   **Importance**: The primary React web application component, handling UI rendering, state management, routing, and all frontend-backend interactions. Contains most of the POS interface logic.
    -   **Changes**:
        -   **Tax Rate Deactivation Fix**: Updated default tax/charge/gratuity/discount data functions (, etc.) to generate UUIDs using  instead of numeric IDs, resolving backend not found errors.
        -   **Dynamic Tax & Charge Display (Cart)**: Moved tax/charge related state variables and the  function from  to the  component scope. Integrated these into  and added  as a  dependency for real-time updates.
        -   **Tax & Charge Display (Active/Edit Orders)**: Modified active order and edit order display logic to show a detailed breakdown of calculated taxes, service charges, and gratuities (including specific names and percentages) instead of just the total or generic labels. In edit mode, it now prefers saved tax values but can dynamically recalculate.
        -   **Tax/Charge Order Type Selection**: Added  field to  state and implemented a comprehensive UI for selecting applicable order types (All/Specific) in the tax and service charge modals.
        -   **Tax/Charge/Gratuity Editing/Saving Fixes**: Corrected field name mismatches between frontend forms (, ,  functions) and backend models ( vs ,  vs ,  vs ). Ensured forms properly initialize and reset all fields.
        -   **Gratuity Implementation**: Added  state to  component, integrated it into  and  functions, and added a Party Size input field to the customer information section in the  UI.
        -   **Service Charge Order Cost Condition**: Added  and  fields to  state and integrated UI elements for these conditions in the service charge modal.

-   **/app/mobile/src/navigation/MainTabNavigator.js**:
    -   **Importance**: Manages the navigation flow for the mobile application.
    -   **Changes**: Incorporated a  stack navigator to provide access to administrative screens mirroring the web app.

-   **/app/mobile/src/screens/StaffManagementScreen.js**:
    -   **Importance**: Mobile interface for managing staff.
    -   **Changes**: Enhanced with a four-tab system (Employees, Schedules, Time & Attendance, Roles & Permissions) to align with the web application's features.

-   **/app/mobile/src/screens/TaxSettingsScreen.js**:
    -   **Importance**: Mobile interface for configuring tax and charges.
    -   **Changes**: Comprehensively enhanced to include all four sections (Tax Rates, Service Charges, Gratuity Rules, Discount Policies) with mobile-optimized UI, mirroring the web app's functionality.
</code_architecture>

<pending_tasks>
-   **Dine-in Table Assignment - Merge Logic (Web App)**: Full implementation for warning about occupied tables and offering to merge orders (deeper integration and edge cases still pending refinement).
</pending_tasks>

<current_work>
Immediately before this summary, the AI engineer was working on enhancing the Service Charge settings to allow activation based on order total cost. This involved adding  and  fields to the backend  and  models in . Concurrently, the frontend's  was updated to include these new fields in the  state, and the , , and  functions were modified to correctly handle the loading, saving, and resetting of these new order cost conditions. The backend's  function was also updated to incorporate this new logic, ensuring service charges are only applied if the order subtotal falls within the specified minimum and maximum amounts. The UI for these conditions was integrated into the Edit Service Charge modal. The last action in the trajectory was the AI engineer successfully testing and confirming that the Apply based on order total cost option now appears in the UI for service charges, and the next step is to demonstrate its full functionality.
</current_work>

<optional_next_step>
Demonstrate the full functionality of the Apply based on order total cost feature for service charges.
</optional_next_step>
